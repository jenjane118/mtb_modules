output_file = "test_23.11.gff3",
original_sRNA_annotation = "ncRNA",
min_sRNA_length=40,
min_UTR_length=50,
paired_end_data=TRUE,
strandedness ="reversely_stranded")
getwd()
devtools::load_all("~/R_projects/baerhunter")
library(baerhunter)
feature_file_editor(bam_directory="~/Data/PRJNA390669_12/bams",
original_annotation_file = "Mtb_h37rv.ASM19595v2_AL123456.3.gff3",
annot_file_dir = ".",
output_file = "test_23.11.gff3",
original_sRNA_annotation = "ncRNA",
min_sRNA_length=40,
min_UTR_length=50,
paired_end_data=TRUE,
strandedness ="reversely_stranded")
setwd("~/git/mtb_modules")
myco_stable<-read.delim(
'Data/stable_rna_myco.txt',
sep = "\t",
header = F,
stringsAsFactors = F
)
head(myco_stable)
import(rtracklayer)
library(rtracklayer)
myco_stable<-read.GFF(
'Data/stable_rna_myco.txt')
myco_stable<-readGFF(
'Data/stable_rna_myco.txt')
head(myco_stable)
# read in entire gff file and filter with rtracklayer
myco_stable<-readGFF(
'ref_seqs/mycobrowser_H37Rv_gff_v3.gff')
head(myco_stable)
colnames(myco_rnas)
# read in entire gff file and filter with rtracklayer
myco_rnas<-readGFF(
'ref_seqs/mycobrowser_H37Rv_gff_v3.gff')
colnames(myco_rnas)
# read in table from file "~/git/mtb_modules/ncRNA_verified.txt"
library(dplyr)
stable_mycornas<-select(myco_rnas[,1:16])
stable_mycornas<-myco_rnas[,1:16]
head(stable_mycornas)
subset_mycornas<-myco_rnas[,1:16]
stable_mycornas<-subset_mycornas[which(subset_mycornas$Functional_Category=='Stable RNAs'),]
colnames(myco_rnas)
# read in entire gff file and filter with rtracklayer
my_cols<-c(colnames(myco_rnas[,1:16]))
my_cols
# read in entire gff file and filter with rtracklayer
#my_cols<-c("seqid","source","type","start","end")
RNA_filter<-c("stable RNAs")
myco_rnas<-readGFF('ref_seqs/mycobrowser_H37Rv_gff_v3.gff', filter=RNA_filter)
# read in entire gff file and filter with rtracklayer
#my_cols<-c("seqid","source","type","start","end")
RNA_filter<-c("stable RNAs")
myco_rnas<-readGFF('ref_seqs/mycobrowser_H37Rv_gff_v3.gff', filter=RNA_filter)
# read in entire gff file and filter with rtracklayer
#my_cols<-c("seqid","source","type","start","end")
RNA_filter<-Functional_Category = "stable RNAs"
# read in entire gff file and filter with rtracklayer
#my_cols<-c("seqid","source","type","start","end")
RNA_filter<-list(Functional_Category = "stable RNAs")
myco_rnas<-readGFF('ref_seqs/mycobrowser_H37Rv_gff_v3.gff', filter=RNA_filter)
# read in entire gff file and filter with rtracklayer
#my_cols<-c("seqid","source","type","start","end")
RNA_filter<-list(Type="ncRNA")
myco_rnas<-readGFF('ref_seqs/mycobrowser_H37Rv_gff_v3.gff', filter=RNA_filter)
# read in entire gff file and filter with rtracklayer
#my_cols<-c("seqid","source","type","start","end")
RNA_filter<-list(type="ncRNA")
myco_rnas<-readGFF('ref_seqs/mycobrowser_H37Rv_gff_v3.gff', filter=RNA_filter)
colnames(myco_rnas)
# column 'Locus'=MTB000115' and 'Name' = ncRv10666, 'Comments' =supported by sRNA-Seq in H37Rv
myco_rnas
# read in table from file "~/git/mtb_modules/ncRNA_verified.txt"
library(dplyr)
ncrna_table <-
read.csv(
"ncRNA_verified.txt",
sep = " ",
header = T,
stringsAsFactors = F
)
head(ncrna_table)
nrow(ncrna_table)
# new ncrna list with tss within 10bp
srna_tss<-ncrna_table[which(ncrna_table$distance < 11),]
nrow(srna_tss)
srna_tss
# lets see how many have no blots?
arnvig_table <-
read.delim(
"Data/Arnvig_ncRNA_2014.csv",
sep = ",",
header = TRUE,
stringsAsFactors = F
)
arnvig_srnas<-arnvig_table$New.annotation
srna_tss[which(srna_tss$sRNA_ID %in% arnvig_srnas),]
# 82 diff expressed in at 1+ conditions
de_cond_1<-read.delim(
"Data/diff_ex_srnas_gerrick.csv",
sep = ",",
header = TRUE,
stringsAsFactors = F
)
# how many have TSS?
de_tss<-srna_tss[which(srna_tss$sRNA_ID %in% de_cond_1$name),]
nrow(de_tss)
# 63 are differentially expressed in at least one condition and have TSS within 10nt
srna_tss[!which(srna_tss$sRNA_ID %in% de_cond_1$name),2]
# these 3 were diff expressed in 3+ conditions (ncRv11803, ncRv11846, and ncRv12659) in Gerrick
check<-c("ncRv11803", "ncRv11846", "ncRv12659")
ncrna_table[which(ncrna_table$sRNA_ID %in% check),]
library(rtracklayer)
# read in entire gff file and filter with rtracklayer
#my_cols<-c("seqid","source","type","start","end")
RNA_filter<-list(type="ncRNA")
# column 'Locus'=MTB000115' and 'Name' = ncRv10666, 'Comments' =supported by sRNA-Seq in H37Rv
# compare with 'Name' to list of diff expressed sRNAs from gerrick (de_cond_1)
f<-de_cond_1[which(de_cond_1$name %in% myco_rnas),]
# column 'Locus'=MTB000115' and 'Name' = ncRv10666, 'Comments' =supported by sRNA-Seq in H37Rv
# compare with 'Name' to list of diff expressed sRNAs from gerrick (de_cond_1)
f<-de_cond_1[which(de_cond_1$name %in% myco_rnas$Name),]
f
# column 'Locus'=MTB000115' and 'Name' = ncRv10666, 'Comments' =supported by sRNA-Seq in H37Rv
# compare with 'Name' to list of diff expressed sRNAs from gerrick (de_cond_1)
f<-de_cond_1[which(de_cond_1$name %in% myco_rnas$Name),1:3]
f
# column 'Locus'=MTB000115' and 'Name' = ncRv10666, 'Comments' =supported by sRNA-Seq in H37Rv
# compare with 'Name' to list of diff expressed sRNAs from gerrick (de_cond_1)
f<-de_cond_1[which(de_cond_1$name %in% myco_rnas$Name),1:4]
f
nrow(f)
#42 are in list on mycobrowser (must use DeJesus list?)
# compare with list of tss verified (de_tss)
t<-de_tss[which(de_tss$sRNA_ID %in% myco_rnas$Name), 1:4]
t
nrow(t)
colnames(myco_rnas)
srna_seq<-myco_rnas$Comments=='Supported by sRNA-Seq in H37Rv'
srna_seq
head(myco_rnas)
srna_seq<-myco_rnas$Comments='Supported by sRNA-Seq in H37Rv'
srna_seq<-myco_rnas[which(myco_rnas$Comments=='Supported by sRNA-Seq in H37Rv'),]
srna_seq<-myco_rnas[which(myco_rnas$Comments='Supported by sRNA-Seq in H37Rv'),]
srna_seq<-myco_rnas[which('Supported by sRNA-Seq in H37Rv' %in% myco_rnas$Comments),]
com<-myco_rnas$Comments
com
srna_seq<-myco_rnas[which(myco_rnas$Comments==rna_comment)]
rna_comment<-c('Supported by sRNA-Seq in H37Rv')
srna_seq<-myco_rnas[which(myco_rnas$Comments==rna_comment)]
type(myco_rnas$Comments)
com<-myco_rnas$Comments[1]
com
srna_seq<-myco_rnas[which(myco_rnas$Comments[1]==rna_comment)]
head(myco_rnas)
com<-myco_rnas$Comments[1]
com
com<-myco_rnas$Comments[,1]
com
srna_seq<-myco_rnas[which(myco_rnas$Comments[,1]==rna_comment)]
com<-myco_rnas$Comments
com
com[50]
com[80]
str(com)
srna_seq<-myco_rnas[which(unlist(myco_rnas$Comments)==rna_comment),]
srna_seq
srna_seq<-myco_rnas[which(rna_comment %in% unlist(myco_rnas$Comments),]
srna_seq<-myco_rnas[which(rna_comment %in% unlist(myco_rnas$Comments)),]
srna_seq
srna_seq<-myco_rnas[grep(rna_comment, myco_rnas$Comments),]
srna_seq<-myco_rnas[grep(rna_comment, unlist(myco_rnas$Comments)),]
com<-myco_rnas$Comments
com[80]
com[80,1]
com[80[1],]
com[[80]]
srna_seq<-myco_rnas[which(rna_comment %in% myco_rnas$Comments[[]]),]
srna_seq<-myco_rnas[grep(rna_comment, myco_rnas$Comments[[]]),]
srna_seq<-myco_rnas[which(rna_comment %in% list(myco_rnas$Comments)),]
srna_seq
list(com)
head(myco_rnas)
srna_seq<-myco_rnas[which(rna_comment %in% myco_rnas[,19]),]
srna_seq<-myco_rnas[which(myco_rnas[,19] %in% rna_comment),]
srna_seq<-myco_rnas[which(myco_rnas$Comments %in% rna_comment),]
srna_seq<-myco_rnas[which(myco_rnas$Comments[] %in% rna_comment),]
srna_seq<-myco_rnas[which(myco_rnas[,19] %in% rna_comment),]
head(myco_rnas)
for (i in 1:nrow(myco_rnas)){
if (rna_comment %in% myco_rnas$Comments[i]){
srna__tss<-c(srna_tss, myco_rnas[i])
}
}
if (rna_comment %in% list(myco_rnas$Comments[i]){
srna__tss<-c(srna_tss, myco_rnas[i])
}
}
for (i in 1:nrow(myco_rnas)){
if (rna_comment %in% list(myco_rnas$Comments[i])){
srna__tss<-c(srna_tss, myco_rnas[i])
}
}
srna_tss
rna_seq_tss<-NULL
rna_seq_tss<-NULL
for (i in 1:nrow(myco_rnas)){
if (rna_comment %in% list(myco_rnas$Comments[i])){
rna_seq_tss<-c(rna_seq_tss, myco_rnas[i])
}
}
rna_seq_tss
list(myco_rnas$Comments)
list(myco_rnas$Comments[80])
if (list(myco_rnas$Comments[i] %in% rna_comment)){
rna_seq_tss<-c(rna_seq_tss, myco_rnas[i])
}
for (i in 1:nrow(myco_rnas)){
if (list(myco_rnas$Comments[i]) %in% rna_comment){
rna_seq_tss<-c(rna_seq_tss, myco_rnas[i])
}
}
rna_seq_tss
rna_seq_tss<-myco_rnas[which(list(myco_rnas$Comments) %in% rna_comment),]
rna_seq_tss
rna_seq_tss<-myco_rnas[which(list(myco_rnas$Comments)==rna_comment),]
rna_seq_tss
list(myco_rnas$Comments[80])
list(myco_rnas$Comments[10])
rna_comment<-c('Supported by sRNA-Seq in H37Rv (see DeJesus et al. 2017)')
rna_seq_tss<-myco_rnas[which(list(myco_rnas$Comments) %in% rna_comment),]
rna_seq_tss
rna_seq_tss<-myco_rnas[grep(list(myco_rnas$Comments), rna_comment),]
rna_seq_tss<-myco_rnas[grep(rna_comment, list(myco_rnas$Comments)),]
rna_seq_tss
rna_seq_tss
rna_seq_tss<-myco_rnas[grep(rna_comment, list(myco_rnas$Comments)[]),]
rna_seq_tss
rna_seq_tss<-myco_rnas[grep(rna_comment, list(myco_rnas$Comments)[[]]),]
rna_seq_tss
# how many of srna-seq are verified with TSS at start??
# make myco_rnas into genomic ranges obj
mycobrowser_gr <- GRanges(
seqnames = "H37Rv",
ranges   = IRanges(myco_rnas$start, end = myco_rnas$end),
strand   = Rle(strand(myco_rnas$strand)),
sRNA_ID  = myco_rnas$Name
)
# find which ones have TSS in first 10 nt
# import table
tss_all<-read.delim("Data/shell_cortes_srna_tss.txt", delim='\t', header = TRUE, stringsAsFactors = F )
# find which ones have TSS in first 10 nt
# import table
tss_all<-read.delim("Data/shell_cortes_srna_tss.txt", sep='\t', header = TRUE, stringsAsFactors = F )
head(tss_all)
# find which ones have TSS in first 10 nt
# import table
tss_all<-read.delim("Data/shell_cortes_srna_tss.txt", sep=' ', header = TRUE, stringsAsFactors = F )
head(tss_all)
View(myco_rnas)
# how many of srna-seq are verified with TSS at start??
# make myco_rnas into genomic ranges obj for each strand
myco_fwd_df<-myco_rnas[myco_rnas$strand == "+", ]
nrow(myco_fwd_df)
myco_rev_df<-myco_rnas[myco_rnas$strand == "-", ]
nrow(myco_rev_df)
f_mycobrowser_gr <- GRanges(
seqnames = "H37Rv",
ranges   = IRanges(myco_fwd_df$start, end = myco_fwd_df$end),
strand   = Rle(strand(myco_fwd_df$strand)),
sRNA_ID  = myco_fwd_df$Name
)
# for rev strand
r_mycobrowser_gr <- GRanges(
seqnames = "H37Rv",
ranges   = IRanges(myco_rev_df$end, end = myco_rev_df$start),
strand   = Rle(strand(myco_rev_df$strand)),
sRNA_ID  = myco_rev_df$Name
)
f_mycobrowser_gr <- GRanges(
seqnames = "H37Rv",
ranges   = IRanges(myco_fwd_df$start, end = myco_fwd_df$start),
strand   = Rle(strand(myco_fwd_df$strand)),
sRNA_ID  = myco_fwd_df$Name
)
# for rev strand
r_mycobrowser_gr <- GRanges(
seqnames = "H37Rv",
ranges   = IRanges(myco_rev_df$end, end = myco_rev_df$end),
strand   = Rle(strand(myco_rev_df$strand)),
sRNA_ID  = myco_rev_df$Name
)
# find distance to nearest tss for fwd strand
tss_nearest_fwd<-
distanceToNearest(f_mycobrowser_gr, total_tss_gr, select=c("arbitrary"))
total_tss_gr <- GRanges(
seqnames = "H37Rv",
ranges = IRanges(total_tss_df$Genome.position, end = total_tss_df$Genome.position),
strand = Rle(strand(total_tss_df$Strand))
)
head(tss_all)
total_tss_gr <- GRanges(
seqnames = "H37Rv",
ranges = IRanges(total_tss_df$Genome.position, end = total_tss_df$Genome.position),
strand = Rle(strand(total_tss_df$Strand))
)
head(tss_all)
total_tss_gr <- GRanges(
seqnames = "H37Rv",
ranges = IRanges(tss_all$Genome.position, end = tss_all$Genome.position),
strand = Rle(strand(tss_all$Strand))
)
# find distance to nearest tss for fwd strand
tss_nearest_fwd<-
distanceToNearest(f_mycobrowser_gr, total_tss_gr, select=c("arbitrary"))
head(tss_nearest_fwd)
head(subjectHits(tss_nearest_fwd))
length(subjectHits(tss_nearest_fwd))
# put in df
#df column for distances
dist_to_tss<-NULL
dist_to_tss<-as.data.frame(mcols(tss_nearest_fwd))
head(dist_to_tss)
#extract df column for TSS coordinate from hits info
fwd_tss_hits<- NULL
fwd_tss_hits<-as.data.frame(total_tss_gr[subjectHits(tss_nearest_fwd)])
nrow(fwd_tss_hits)
TSS_fwd<-NULL
TSS_fwd<-as.data.frame(fwd_tss_hits$start)
colnames(TSS_fwd)<-c("TSS")
# make dataframe
f_dist_to_total<-NULL
f_dist_to_total <-
as.data.frame(f_mycobrowser_gr[queryHits(fwd_tss_hits)])
head(tss_nearest_fwd)
head(subjectHits(tss_nearest_fwd))
dist_to_tss<-as.data.frame(mcols(tss_nearest_fwd))
head(dist_to_tss)
fwd_tss_hits<-as.data.frame(total_tss_gr[subjectHits(tss_nearest_fwd)])
nrow(fwd_tss_hits)
TSS_fwd<-NULL
TSS_fwd<-as.data.frame(fwd_tss_hits$start)
colnames(TSS_fwd)<-c("TSS")
# make dataframe
f_dist_to_total<-NULL
f_dist_to_total <-
as.data.frame(f_mycobrowser_gr[queryHits(fwd_tss_hits)])
f_dist_to_total <- as.data.frame(f_mycobrowser_gr[queryHits(tss_nearest_fwd)])
f_dist_to_total<- cbind(f_dist_to_total, dist_to_tss, TSS_fwd)
f_dist_to_total$end<-myco_fwd_df$stop
#remove column 'width'
f_dist_to_total$width<-NULL
# reorder columns
f_dist_to_total<-f_dist_to_total[,c(1,5,2,3,4,6,7)]
View(f_dist_to_total)
# make dataframe
r_dist_to_total<-NULL
# find distance to nearest tss for fwd strand
tss_nearest_rev<-
distanceToNearest(r_mycobrowser_gr, total_tss_gr, select=c("arbitrary"))
head(tss_nearest_rev)
head(subjectHits(tss_nearest_rev))
length(subjectHits(tss_nearest_rev))
# put in df
#df column for distances
dist_to_tss<-NULL
dist_to_tss<-as.data.frame(mcols(tss_nearest_rev))
head(dist_to_tss)
rev_tss_hits<-as.data.frame(total_tss_gr[subjectHits(tss_nearest_rev)])
nrow(rev_tss_hits)
TSS_rev<-NULL
TSS_rev<-as.data.frame(rev_tss_hits$start)
colnames(TSS_rev)<-c("TSS")
r_dist_to_total<-NULL
r_dist_to_total <- as.data.frame(r_mycobrowser_gr[queryHits(tss_nearest_rev)])
r_dist_to_total<- cbind(r_dist_to_total, dist_to_tss, TSS_rev)
r_dist_to_total$end<-myco_rev_df$stop
#remove column 'width'
r_dist_to_total$width<-NULL
View(r_dist_to_total)
#put together
myco_TSS_df<-rbind(f_dist_to_total, r_dist_to_total)
head(myco_TSS_df)
myco_TSS_df[myco_TSS_df$distance<10,2]
head(myco_TSS_df)
myco_TSS_df[myco_TSS_df$distance<10,]
#order by start
ordered_myco_tss<-myco_TSS_df[order(myco_TSS_df$start),]
ordered_myco_tss
#how many within 10nt
ordered_myco_tss[myco_TSS_df$distance<10,]
#how many within 10nt
ordered_myco_tss[ordered_myco_tss$distance<10,]
ordered_myco_tss
ordered_myco_tss[ordered_myco_tss$distance<10,]
tss_verified_myco<-ordered_myco_tss[ordered_myco_tss$distance<10,]
tss_verified_myco$sRNA_ID
nrow(tss_verified_myco)
myco_names<-tss_verified_myco$sRNA_ID
myco
myco_names
#write to file
write.table(tss_verified_myco, "Data/mycobrowser_with_TSS.txt", quote = FALSE, row.names = FALSE)
f_mycobrowser_gr <- GRanges(
seqnames = "H37Rv",
ranges   = IRanges(myco_fwd_df$start, end = myco_fwd_df$start),
strand   = Rle(strand(myco_fwd_df$strand)),
sRNA_ID  = myco_fwd_df$Name,
locus    = myco_fwd_df$Locus
)
# for rev strand
r_mycobrowser_gr <- GRanges(
seqnames = "H37Rv",
ranges   = IRanges(myco_rev_df$end, end = myco_rev_df$end),
strand   = Rle(strand(myco_rev_df$strand)),
sRNA_ID  = myco_rev_df$Name,
locus    = myco_fwd_df$Locus
)
# for rev strand
r_mycobrowser_gr <- GRanges(
seqnames = "H37Rv",
ranges   = IRanges(myco_rev_df$end, end = myco_rev_df$end),
strand   = Rle(strand(myco_rev_df$strand)),
sRNA_ID  = myco_rev_df$Name,
locus    = myco_fwd_df$Locus
)
# for rev strand
r_mycobrowser_gr <- GRanges(
seqnames = "H37Rv",
ranges   = IRanges(myco_rev_df$end, end = myco_rev_df$end),
strand   = Rle(strand(myco_rev_df$strand)),
sRNA_ID  = myco_rev_df$Name,
locus    = myco_rev_df$Locus
)
tss_nearest_fwd<-
distanceToNearest(f_mycobrowser_gr, total_tss_gr, select=c("arbitrary"))
head(tss_nearest_fwd)
head(subjectHits(tss_nearest_fwd))
length(subjectHits(tss_nearest_fwd))
dist_to_tss<-NULL
dist_to_tss<-as.data.frame(mcols(tss_nearest_fwd))
head(dist_to_tss)
fwd_tss_hits<- NULL
fwd_tss_hits<-as.data.frame(total_tss_gr[subjectHits(tss_nearest_fwd)])
nrow(fwd_tss_hits)
TSS_fwd<-NULL
TSS_fwd<-as.data.frame(fwd_tss_hits$start)
colnames(TSS_fwd)<-c("TSS")
head(dist_to_tss)
#extract df column for TSS coordinate from hits info
fwd_tss_hits<- NULL
fwd_tss_hits<-as.data.frame(total_tss_gr[subjectHits(tss_nearest_fwd)])
fwd_tss_hits
TSS_fwd<-NULL
TSS_fwd<-as.data.frame(fwd_tss_hits$start)
colnames(TSS_fwd)<-c("TSS")
# make dataframe
f_dist_to_total<-NULL
f_dist_to_total <- as.data.frame(f_mycobrowser_gr[queryHits(tss_nearest_fwd)])
f_dist_to_total<- cbind(f_dist_to_total, dist_to_tss, TSS_fwd)
f_dist_to_total$end<-myco_fwd_df$stop
#remove column 'width'
f_dist_to_total$width<-NULL
View(f_dist_to_total)
# find distance to nearest tss for fwd strand
tss_nearest_rev<-
distanceToNearest(r_mycobrowser_gr, total_tss_gr, select=c("arbitrary"))
head(tss_nearest_rev)
head(subjectHits(tss_nearest_rev))
length(subjectHits(tss_nearest_rev))
# put in df
#df column for distances
dist_to_tss<-NULL
dist_to_tss<-as.data.frame(mcols(tss_nearest_rev))
head(dist_to_tss)
#extract df column for TSS coordinate from hits info
rev_tss_hits<- NULL
rev_tss_hits<-as.data.frame(total_tss_gr[subjectHits(tss_nearest_rev)])
nrow(rev_tss_hits)
TSS_rev<-NULL
TSS_rev<-as.data.frame(rev_tss_hits$start)
colnames(TSS_rev)<-c("TSS")
# make dataframe
r_dist_to_total<-NULL
r_dist_to_total <- as.data.frame(r_mycobrowser_gr[queryHits(tss_nearest_rev)])
r_dist_to_total<- cbind(r_dist_to_total, dist_to_tss, TSS_rev)
r_dist_to_total$end<-myco_rev_df$stop
#remove column 'width'
r_dist_to_total$width<-NULL
View(r_dist_to_total)
#put together
myco_TSS_df<-rbind(f_dist_to_total, r_dist_to_total)
head(myco_TSS_df)
#order by start
ordered_myco_tss<-myco_TSS_df[order(myco_TSS_df$start),]
#how many within 10nt
tss_verified_myco<-ordered_myco_tss[ordered_myco_tss$distance<10,]
myco_names<-tss_verified_myco$sRNA_ID
nrow(tss_verified_myco)
myco_names
#write to file
write.table(tss_verified_myco, "Data/mycobrowser_with_TSS.txt", quote = FALSE, row.names = FALSE)
View(tss_verified_myco)
source('~/git/mtb_modules/Scripts/TSS_verified_gerrick.R')
savehistory("~/git/mtb_modules/02_02_21.Rhistory")
